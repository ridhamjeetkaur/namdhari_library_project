import React, { useState } from 'react';

// Define the Book interface to match your Mongoose schema
interface Book {
  id?: string; // Optional, as it's generated by MongoDB
  title: string;
  author: string;
  cover: string;
  rating: number;
  category: string;
  description: string; // Added description field
  link?: string; // Optional
  downloadLink?: string; // Optional
  createdAt?: string; // Added by timestamps
  updatedAt?: string; // Added by timestamps
}

const BookForm: React.FC = () => {
  // State for form fields
  const [formData, setFormData] = useState<Book>({
    title: '',
    author: '',
    cover: '',
    rating: 0,
    category: '',
    description: '', // Initialize description
    link: '',
    downloadLink: '',
  });

  // State for UI feedback
  const [loading, setLoading] = useState<boolean>(false);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  // Base URL for your backend API
  // Make sure this matches your backend's actual URL (e.g., 'http://localhost:5000')
  const API_BASE_URL = 'http://localhost:5000'; 

  // Handle input changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: name === 'rating' ? parseFloat(value) : value, // Convert rating to number
    }));
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);
    setSuccessMessage(null);
    setErrorMessage(null);

    try {
      const response = await fetch(`${API_BASE_URL}/api/books`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      const result = await response.json();

      if (response.ok) {
        setSuccessMessage(result.message || 'Book added successfully!');
        // Clear the form after successful submission
        setFormData({
          title: '',
          author: '',
          cover: '',
          rating: 0,
          category: '',
          description: '', // Clear description
          link: '',
          downloadLink: '',
        });
      } else {
        setErrorMessage(result.message || result.error || 'Failed to add book.');
        if (result.details) {
          setErrorMessage((prev) => `${prev} Details: ${result.details.join(', ')}`);
        }
      }
    } catch (error: any) {
      console.error('Error submitting form:', error);
      setErrorMessage(`Network error or server unreachable: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="bg-white p-8 rounded-xl shadow-2xl w-full max-w-2xl border border-gray-200">
        <h2 className="text-4xl font-extrabold text-center text-gray-800 mb-8 font-inter">Add New Book</h2>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Title */}
          <div>
            <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">Book Title</label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleChange}
              required
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm transition duration-200 ease-in-out"
              placeholder="e.g., The Great Gatsby"
            />
          </div>

          {/* Author */}
          <div>
            <label htmlFor="author" className="block text-sm font-medium text-gray-700 mb-1">Author</label>
            <input
              type="text"
              id="author"
              name="author"
              value={formData.author}
              onChange={handleChange}
              required
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm transition duration-200 ease-in-out"
              placeholder="e.g., F. Scott Fitzgerald"
            />
          </div>

          {/* Cover URL */}
          <div>
            <label htmlFor="cover" className="block text-sm font-medium text-gray-700 mb-1">Cover Image URL</label>
            <input
              type="url"
              id="cover"
              name="cover"
              value={formData.cover}
              onChange={handleChange}
              required
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm transition duration-200 ease-in-out"
              placeholder="e.g., https://example.com/cover.jpg"
            />
          </div>

          {/* Rating */}
          <div>
            <label htmlFor="rating" className="block text-sm font-medium text-gray-700 mb-1">Rating (0-5)</label>
            <input
              type="number"
              id="rating"
              name="rating"
              value={formData.rating}
              onChange={handleChange}
              required
              min="0"
              max="5"
              step="0.1"
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm transition duration-200 ease-in-out"
              placeholder="e.g., 4.5"
            />
          </div>

          {/* Category */}
          <div>
            <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">Category</label>
            <input
              type="text"
              id="category"
              name="category"
              value={formData.category}
              onChange={handleChange}
              required
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm transition duration-200 ease-in-out"
              placeholder="e.g., Fantasy, Science Fiction, Romance"
            />
          </div>

          {/* Description */}
          <div>
            <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">Description</label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleChange}
              required // Set to required or remove based on your backend schema
              rows={4}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm transition duration-200 ease-in-out resize-y"
              placeholder="A brief summary of the book..."
            ></textarea>
          </div>

          {/* Link (Optional) */}
          <div>
            <label htmlFor="link" className="block text-sm font-medium text-gray-700 mb-1">External Link (Optional)</label>
            <input
              type="url"
              id="link"
              name="link"
              value={formData.link}
              onChange={handleChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm transition duration-200 ease-in-out"
              placeholder="e.g., https://www.goodreads.com/book/..."
            />
          </div>

          {/* Download Link (Optional) */}
          <div>
            <label htmlFor="downloadLink" className="block text-sm font-medium text-gray-700 mb-1">Download Link (Optional)</label>
            <input
              type="url"
              id="downloadLink"
              name="downloadLink"
              value={formData.downloadLink}
              onChange={handleChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm transition duration-200 ease-in-out"
              placeholder="e.g., https://example.com/book.pdf"
            />
          </div>

          {/* Submission Button */}
          <button
            type="submit"
            className={`w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-lg font-semibold text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-300 ease-in-out transform hover:scale-105
              ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
            disabled={loading}
          >
            {loading ? 'Adding Book...' : 'Add Book'}
          </button>
        </form>

        {/* Feedback Messages */}
        {successMessage && (
          <div className="mt-6 p-4 rounded-lg bg-green-100 text-green-800 text-center font-medium shadow-md">
            {successMessage}
          </div>
        )}
        {errorMessage && (
          <div className="mt-6 p-4 rounded-lg bg-red-100 text-red-800 text-center font-medium shadow-md">
            {errorMessage}
          </div>
        )}
      </div>
    </div>
  );
};

export default BookForm;
